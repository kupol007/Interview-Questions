fileprivate VS private VS internal access level ?

Internal access enables entities to be used within any source file from their defining module, but not in any source file outside of that module. You typically use internal access when defining an app’s or a framework’s internal structure. Consider framework or module Alpha with internal class and internal method, if framework Beta imports Alpha then internal class and method of Alpha will not be available to framework Beta
File-private access restricts the use of an entity to its own defining source file. Use file-private access to hide the implementation details of a specific piece of functionality when those details are used within an entire file. Consider a class Alpha with file-private member, class Beta with having an object of Alpha will not be able to access file-private method since it is file restricted.
Private access restricts the use of an entity to the enclosing declaration, and to extensions of that declaration that are in the same file. Use private access to hide the implementation details of a specific piece of functionality when those details are used only within a single declaration. Consider class Alpha and its extension in the same file with the private and file-private method in both, they can access each other’s method. Class Beta defined in the same file cannot access both private methods but can access file-private methods of class Alpha.
