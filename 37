Non-Escaping and Escaping Closures

The lifecycle of a non-escaping closure is simple: Pass a closure into a function -> The function runs the closure (or not) -> The function returns

Escaping closure: A closure is said to escape a function when the closure is passed as an argument to the function, but is called after the function returns. we have to refer to self explicitly within the escaping closure. There are several ways to have a closure escape its containing function:

Asynchronous execution: If you execute the closure asynchronously on a dispatch queue, the queue will hold onto the closure for you. You have no idea when the closure will be executed and there’s no guarantee it will complete before the function returns.

Storage: Storing the closure to a global variable, property, or any other bit of storage that lives on past the function call means the closure has also escaped. More Detail: SwiftUnbox and Apple Docs.




Неразъемные и экранирующие затворы

Жизненный цикл неэкранирующего замыкания прост: передайте замыкание в функцию -> Функция запускает замыкание (или нет) -> Функция возвращает

Экранирующее замыкание: Считается, что замыкание экранирует функцию, когда замыкание передается в качестве аргумента функции, но вызывается после возврата функции. мы должны явно ссылаться на self внутри экранирующего замыкания. Существует несколько способов заставить замыкание избежать содержащей его функции:

Асинхронное выполнение: Если вы выполняете закрытие асинхронно в очереди отправки, очередь сохранит закрытие для вас. Вы понятия не имеете, когда будет выполнено закрытие, и нет никакой гарантии, что оно завершится до того, как функция вернется.

Хранение: Сохранение замыкания в глобальной переменной, свойстве или любом другом бите хранилища, который сохраняется после вызова функции, означает, что замыкание также экранировано. Более подробно: Swift Unbox и Apple Docs.
