Explain [weak self] and [unowned self] ?

unowned does the same as weak with one exception: The variable will not become nil and therefore the variable must not be an optional.

By declaring it [weak self] you get to handle the case that it might be nil inside the closure at some point and therefore the variable must be an optional. A case for using [weak self] in an asynchronous network request, is in a view controller where that request is used to populate the view.


Can you explain the difference between a weak and an unowned reference in Swift?
In Swift, a reference is a way to refer to the memory address of an object. A strong reference is a reference that keeps the object it refers to alive in memory, while a weak or unowned reference is a reference that does not keep the object alive.
A weak reference is a reference that is allowed to be nil, while an unowned reference is a reference that is never nil. This means that a weak reference is used when the object it refers to may not exist, while an unowned reference is used when the object it refers to always exists.
Here is an example of how to use weak and unowned references in Swift:
class Person {
    let name: String
    var apartment: Apartment?
    init(name: String) {
        self.name = name
        print("\(name) is being initialized")
    }
    deinit {
        print("\(name) is being deinitialized")
    }
}
class Apartment {
    let number: Int
    weak var tenant: Person?
    init(number: Int) {
        self.number = number
        print("Apartment #\(number) is being initialized")
    }
    deinit {
        print("Apartment #\(number) is being deinitialized")
    }
}
var john: Person?
var number73: Apartment?
john = Person(name: "John")
number73 = Apartment(number: 73)
john!.apartment = number73
number73!.tenant = john
john = nil
number73 = nil
In this example, the tenant property of the Apartment class is declared as a weak reference, because an apartment may or may not have a tenant. This means that when the john variable is set to nil, the Person instance it refers to is deinitialized and the tenant property of the Apartment instance is set to nil.



unowned выполняет то же самое, что и weak, за одним исключением: переменная не станет nil, и поэтому переменная не должна быть необязательной.

Объявляя это [слабое self], вы получаете возможность обработать случай, когда в какой-то момент внутри замыкания может быть nil, и поэтому переменная должна быть необязательной. Примером использования [weak self] в асинхронном сетевом запросе является контроллер представления, где этот запрос используется для заполнения представления.
